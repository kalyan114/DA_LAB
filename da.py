# -*- coding: utf-8 -*-
"""da.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OYGwR9mejnF8m7RlnFwfJz2ZmwoDi7Zs
"""

import io,os,sys,math
from math import *
from pandas import *
from numpy import *
import matplotlib.pyplot as plt

d={
    'cars':['bmw','volvo','ford'],
   'passings':[3,7,2]
}
m=pd.DataFrame(d)
print(m)

print(pd.__version__)

a=[1,7,2]
m=pd.Series(a)
print(m)

print(m[0])

b=[1,2,3]
m=pd.Series(b,index=['x','y','z'])
print(m)

print(m['y'])

c={'day1':420,'day2':380,'day3':390}
m=pd.Series(c)
print(m)

c={'day1':420,'day2':380,'day3':390}
d=pd.Series(c,index=['day1','day3'])
print(d)

data = {
  "calories": [420, 380, 390],
  "duration": [50, 40, 45]
}
df=pd.DataFrame(data)
print(df)

#1.Write a NumPy program to get the numpy version and show numpy build configuration.
print(np.__version__)
print(np.show_config())

#2.Write a NumPy program to get help on the add function.
print(np.info(np.add))

#3.Write a NumPy program to test whether none of the elements of a given array is zero.
l=[1,2,3]
x=np.array(l)
print(np.all(x))

#4.Write a NumPy program to create an array of 10 zeros, 10 ones, 10 fives.
v=np.zeros(10)
print(v)
v=np.append(v,np.ones(10))
print(v)
v=np.append(v,np.ones(10)*5)
print(v)

#5.Write a NumPy program to create an array of all the even integers from 30 to 70.
# v=np.array(30)
# for i in range(31,71):
#   if not i&1:v=np.append(v,i)
# print(v)

#builtin
print(np.arange(30,71,2))

#6.Write a NumPy program to create a 3x3 identity matrix.
v=np.identity(3,dtype=float)
print(v)

#or by iteration we can create identity...
# v=np.array(0)
# n=int(input())
# for i in range(n):
#   for j in range(n):
#     if i==j:v=np.append(v,1)
#     else:v=np.append(v,0)
# a=np.delete(v,0)
# a.reshape(n,n)
# print(a)

#7.Write a NumPy program to create a vector with values from 0 to 20 and change the sign of the numbers in the range from 9 to 15.
x=np.arange(21)
x[(x>=9) & (x<=15)]*=-1
print(x)

#8.Write a NumPy program to find the number of rows and columns of a given matrix.
x=np.identity(5,dtype=float)
print(x.shape)

#9.Write a NumPy program to create a 10x10 matrix, in which the elements on the borders will be equal to 1, and inside 0.
#iterative approach:
# x=np.ones(10)
# for i in range(8):
#   x=np.append(x,1)
#   x=np.append(x,np.zeros(8))
#   x=np.append(x,1)
# x=np.append(x,np.ones(10))
# print(x.reshape(10,10))

#predefined function:
x=np.ones((10,10))
x[1:-1,1:-1]=0
print(x)

#10.Write a NumPy program to compute sum of all elements, sum of each column and sum of each row of a given array.
z=np.array([[0,1],[2,3]])
print(z)
print("Sum of all elements in matrix:",np.sum(z))
print("Sum of all elements in row:",np.sum(z,axis=1))
print("Sum of all elements in col:",np.sum(z,axis=0))

#11.Write a NumPy program to convert a given list into an array, then again convert it into a list. Check initial list and final list are equal or not.
l=[[1,2],[3,4]]
z=np.array(l)
print(z)
x=z.tolist()
print(x)
print(z==x)

#12.Write a NumPy program to create a 3x3x3 array filled with arbitrary values.
z=np.random.random((3,3,3))
print(z)

#13.Write a NumPy program to create a 5x5 zero matrix with elements on the main diagonal equal to 1, 2, 3, 4, 5.
#iterative approach..
# v=np.array(0)
# for i in range(1,6):
#   for j in range(1,6):
#     if i==j:v=np.append(v,i)
#     else:v=np.append(v,0)
# v=np.delete(v,0)
# print(v.reshape(5,5))

#predefined function...
z=np.diag([1,2,3,4,5])
print(z)

#14.Write a NumPy program to extract all numbers from a given array which are less and greater than a specified number.
l=np.random.random((3,3))
print("Elements of array greater than 0.5 are:",l[l>0.5])
print("Elements of array less than 0.5 are:",l[l<0.5])

#15.Write a NumPy program to compute the sum of the diagonal element of a given array.
l=np.arange(9).reshape(3,3)
print("Sum of Diagonal elements are:",np.trace(l))

# 16.	Get the common items between two arrays.
# a = np.array([1,2,3,2,3,4,3,4,5,6])
# b = np.array([7,2,10,2,7,4,9,4,9,8])
# Desired Output:array([2, 4])

a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])
print(np.intersect1d(a,b))

#1.Down load the dataset winequality-red.csv file( each column is separated by a semicolon (;)) from the UCI Machine Learning Repository
#2.Convert it to numPy array, name it as wines (leave the first row of the list) and specify the data type of array as float.
wines = np.genfromtxt("/content/winequality-red.csv",delimiter=';', skip_header=1) 
print(wines)

#3.Identify the shape of the array.
print(wines.shape)

#4.Display the element at row 3 and column 4.
print(wines[2][3])

#5.Display the first three items from the fourth column.
print(wines[:3, [3]])

#6.Display third column from each row.
print(wines[:,[2]])

#7.Display fourth row.
print(wines[3,:])

#8.Assign value 10 to 2nd row and 6th column element.
wines[1][5]=10
# print(wines)

#9.Take the 10th column from wines array and name that slice as slice_new and assign value 666 to all elements of slice_new.
slice_new=wines[:,9]
slice_new[:]=666
print(slice_new)

#10.	Display wines array.
print(wines)

#11.Find the data type of wines array and Change the data type to int.
# print(type(wines[0][0]))
wines=wines.astype(int)
print(wines)

#12.Add 10 points to each quality score.
print("Before add:",wines[:][11])
wines[:][11]=10+wines[:][11]
print("After add:",wines[:][11])

#13.Find the sum of all the elements in an array.
print(np.sum(wines))

#14.Find the sum of all the values in every column.
print(np.sum(wines,axis=0))

#15.Find the sum of all the values in every row.
print(np.sum(wines,axis=1))

#16.Add the quality column to itself.
print(wines[:][11])
wines[:][11]=wines[:][11]+wines[:][11]
print(wines[:][11])

#17.Multiply alcohol by quality.
print(wines[:][10])
wines[:][10]=wines[:][10]*wines[:][11]
print(wines[:][10])

#18.Display which wines have a quality rating higher than 5.
# print(wines[:][i] for i in wines[:][:]>5)
# for i in range(len(wines)):
#   if wines[i][11]>5:print(wines[i][11],end=' ')
print(wines[:,11>5])

#19.Check if any wines have a quality rating equal to 10.
s=wines[:][11]==10
print(s)

#20.Select rows in wines where the quality is over 7.
wines[:,11>7]
#manual approach..
# for i in range(len(wines)):
#   if wines[i][11]>7:print(wines[i][11])

#21.Display wines with alcohol greater than 10 and quality greater than 7.
wines[:,10>10] and wines[:,11>7]

#22.Change the shape of wines array.
temp=wines
print("Before reshape:",temp.shape)
temp=temp.reshape(12,1599)
print("After reshape:",temp.shape)
print(temp)

#pratice.....
#data munging/baggering is one of the important concepts of data analytics...

import pandas as pd
data = {'Name': [ 'Jai', 'Princi', 'Gaurav','Anuj', 'Ravi', 'Natasha', 'Riya' ],
               'Age': [17, 17, 18, 17, 18, 17, 17],
             'Gender': ['M', 'F', 'M', 'M', 'M', 'F', 'F' ],
        'Marks': [90, 76, 'NaN', 74, 65, 'NaN', 71]}
df=pd.DataFrame(data)
print(df)
print()
print("We are converting NaN to following data as follows...")
print()
c,a=0,0
for i in df['Marks']:
  if str(i).isnumeric():
    c+=1;a+=i;
a/=c
#replacing missing values...
df=df.replace(to_replace="NaN",value=a)
#displaying the data...
print(df)

#After replacing , we are going to reshape given data...
#categorizing gender...by  M to 0 and F to 1...
df['Gender']=df['Gender'].map({'M':0,'F':1,}).astype(float)
print(df)

#To filter the data as follows....
df=df[df['Marks']>=75]
#removing age row..
df=df.drop(['Age'],axis=1)
print(df)

#1.Using Numpy, write a basic array of operations on single array to add x to each element of array and subtract y from each element of array. 

from numpy import *
from pandas import *
from math import *
a=array([1,2,3])
print(a+1)
print(a-1)

#2.Using Numpy, write a program to add, subtract and multiply two matrices.

x=matrix('1 2;3 4')
y=matrix('4 3;2 1')
print(x+y)
print(x-y)
print(x*y)
print(x/y)

"""Write a Python program to do the following operations: Library: NumPy"""

#i)	Create multi-dimensional arrays and find its shape and dimension.
x=matrix('1 2;3 4')
print(shape(x))
print(ndim(x))

#ii)	Create a matrix full of zeros and ones.
v=np.identity(3,dtype=int)
print(v)

#iii)	Reshape and flatten data in the array.
a=matrix('1 2 3;4 5 6')
print(a)
a=reshape(a,(3,2))
print(a)
print(a.flatten())

#iv)	Append data vertically and horizontally.
a=Series(['h','i'])
b=Series(['o','h'])
print(concat([a,b],axis=1))
print(concat([a,b],axis=0))

#v)	Apply indexing and slicing on array.
a=arange(10)
s=slice(2,7,2)
print(a[s])

#vi)	Use statistical functions on array - Min, Max, Mean, Median and Standard Deviation.
a=matrix('1 2;3 4')
print(amin(a),amax(a),mean(a),median(a),std(a))

#vii)	Dot and matrix product of two arrays.
x=matrix('1 2;3 4')
y=matrix('4 3;2 1')
print(dot(x,y))
print(matmul(y,x))

#viii)	Compute the Eigen values of a matrix.
a=matrix('1 2;3 4')
print(linalg.eig(a))

#ix)	Solve a linear matrix equation such as 3 * x0 + x1 = 9, x0 + 2 * x1 = 8.
l=[3,1,-9]
m=[1,2,-8]

#x)	Compute the multiplicative inverse of a matrix.
print(linalg.inv(a))

#xi)	Compute the rank of a matrix.
print(linalg.matrix_rank(a))

#xii) Compute the determinant of an array.
a=matrix('1 2;3 4')
# a=arange(1,10).reshape(3,3)
print(linalg.det(a))

#1.	Write a Pandas program to create and display a one-dimensional array-like object containing an array of data using Pandas module.
a=Series([1,2,3,4,5])
print(a)

#2.	Write a pandas program to convert a pandas module series to python list.
print(a.tolist())

#3.	Write a pandas program to add, subtract, multiple and divide two pandas series.
b=Series([6,7,8,9,10])
print(a+b,a-b,a*b,a/b)

#4.	Write a Pandas program to convert all the string values to upper, lower cases in a given pandas series. Also find the length of the string values.
s=Series(['X','Y','Abc',nan,None,'bird'])
print(s.str.upper(),s.str.lower(),s.str.len())

#5.	Write a Pandas program to remove whitespaces, left sided whitespaces and right sided whitespaces of the string values of a given pandas series
a=Index(['Green','Black','Red','White','Pink'])
print(a.str.strip(),a.str.lstrip(),a.str.rstrip())

#6.	Write a Pandas program to create and display a DataFrame consist of student name, father name , mobile number as columns and register number as index.
data={'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
        'score': [12.5, 9, 16.5, nan, 9, 20, 14.5, nan, 8, 19],
        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
df=DataFrame(data,labels)
print(df)

#7.	Write a Pandas program to get list from DataFrame column headers.
print(list(df.columns.values))

#8.	Write a Pandas program to change the name of the student.
df['name'] = df['name'].replace('Dima', 'Suresh')
print(df)

#9.	Write a Pandas program to insert a new column “grade” in existing DataFrame.
address = ['Delhi', 'Bangalore', 'Chennai', 'Patna','Vijaywada','Delhi', 'Bangalore', 'Chennai', 'Patna','Vijaywada']
df['Address']=address
print(df)

#Write a pandas program to create and display a dataframe from a specified dictionary data which has the index labels.
data={'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'],
        'score': [12.5, 9, 16.5, nan, 9, 20, 14.5, nan, 8, 19],
        'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1],
        'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']}
labels=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
df=DataFrame(data,labels)
# df["Index"]=labels
print(df)

"""Python Pandas Dataframe Basics"""

#1. How to create a Dataframe

#•	Creating a DataFrame from a list of lists
a=[["ram",1],["sam",2],["lucky",3]]
print(DataFrame(a))
#•	Creating a DataFrame from a dict of lists:
data = {'Category':['Array', 'Stack', 'Queue'],'Marks':[20, 21, 19]}
print(DataFrame(data))
#•	Creating an index DataFrame from a dict of lists:
d=dict(a)
print(DataFrame.from_records(d,index=['1', '2']))
#•	Creating a DataFrame from a list of dicts
data = [{'Geeks': 'dataframe', 'For': 'using', 'geeks': 'list'},{'Geeks':10, 'For': 20, 'geeks': 30}]
print(DataFrame(data))
#•	Creating a DataFrame from a list of dicts and specifying the row indices.

#•	Creating a DataFrame from a list of dicts and specifying both the row indices and the column indices

#•	Creating a DataFrame from a list of tuples:
d1 = [('Peter', 18, 7),
        ('Riff', 15, 6),
        ('John', 17, 8),
        ('Michel', 18, 7),
        ('Sheli', 17, 5) ]
print(DataFrame(d1))
#•	Creating a DataFrame using the zip() function:
Name = ['tom', 'krish', 'nick', 'juli']
Age = [25, 30, 26, 22]
print(list(zip(Name, Age)))
#•	Creating an empty DataFrame
print(DataFrame())

#2. How to sort rows within a pandas dataframe.
students = [('Ankit', 22, 'Up', 'Geu'),
           ('Ankita', 31, 'Delhi', 'Gehu'),
           ('Rahul', 16, 'Tokyo', 'Abes'),
           ('Simran', 41, 'Delhi', 'Gehu'),
           ('Shaurya', 33, 'Delhi', 'Geu'),
           ('Harshita', 35, 'Mumbai', 'Bhu' ),
           ('Swapnil', 35, 'Mp', 'Geu'),
           ('Priya', 35, 'Uk', 'Geu'),
           ('Jeet', 35, 'Guj', 'Gehu'),
           ('Ananya', 35, 'Up', 'Bhu')
            ]
details =DataFrame(students, columns =['Name', 'Age','Place', 'College'],
                        index =[ 'b', 'c', 'a', 'e', 'f','g', 'i', 'j', 'k', 'd'])
print(details.sort_values(by = 'Name'))

#3. How to find the largest value in a pandas dataframe.